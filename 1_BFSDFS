#include <iostream>
#include <list>
#include <map>
#include <queue>

using namespace std;

class Graph
{
public:
    map<int, list<int>> adjList;
    map<int, bool> visited;
    queue<int> q;

    void addEdge(int src, int dest)
    {
        adjList[src].push_back(dest);
        adjList[dest].push_back(src);
    }

    void DFS(int node)
    {

        visited[node] = true;
        cout << node << " ";

        for (int i : adjList[node])
        {
            if (!visited[i])
                DFS(i);
        }
    }

    void BFS()
    {

        if (q.empty())
            return;

        int node = q.front();
        q.pop();

        cout << node << " ";
        for (int i : adjList[node])
        {
            if (!visited[i])
            {
                visited[i] = true;
                q.push(i);
            }
        }
        BFS();
    }
};

int main()
{
    Graph g;

    int src;
    int dest;

    int node;
    cout << "Enter the number of nodes :";
    cin >> node;

    int edges;
    cout << "Enter the number of edges :";
    cin >> edges;

    for (int i = 0; i < edges; i++)
    {

        cout << "Enter source vertex :";
        cin >> src;

        cout << "enter the destination vertex :";
        cin >> dest;

        g.addEdge(src, dest);
    }

    cout << endl
         << endl;
    cout << " * * * * * MENU * * * * * " << endl;
    cout << " 0. DFS" << endl;
    cout << " 1. BFS" << endl;
    cout << endl
         << endl;
    int ch;

    cout << "Enter your choice  : ";
    cin >> ch;
    if (!ch)
    {
        cout << "DFS on the given graph is :";
        g.DFS(0);
    }
    else
    {
        cout << "BFS on the given graph is: ";
        g.q.push(0);
        g.visited[0] = true;
        g.BFS();
    }
    return 0;
}
