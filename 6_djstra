#include <bits/stdc++.h>
using namespace std;

int findMinVertex(int *distance, bool *visited, int n)
{
    int minVertex = -1;
    for (int i = 0; i < n; i++)
    {
        if (!visited[i] && (minVertex == -1 || distance[i] < distance[minVertex]))
        {
            minVertex = i;
        }
    }
    return minVertex;
}

void dijkstra(int **edges, int n)
{
    // vertex visit zala ki nahi tyasathi boolean array
    //  dusara array tya vertex ch asanare src pasun ch distance

    int *distance = new int[n];
    bool *visited = new bool[n];

    for (int i = 0; i < n; i++)
    {
        distance[i] = INT_MAX; // ADHI SAGALYANCH DIST INFINITE
        visited[i] = false;    // ek pan visited nahi
    }

    // pan 0 ch dist 0 pasun 0!

    distance[0] = 0;

    // aata minimum vertex dist asanara vertex shodha

    for (int i = 0; i < n - 1; i++)
    {
        // shejar cha min vertex pahije
        int minVertex = findMinVertex(distance, visited, n);
        visited[minVertex] = true;

        for (int j = 0; j < n; j++)
        {
            if (edges[minVertex][j] != 0 && !visited[j]) // A src aahr B min vertex aani C neighbor tar mg dist = AB+BC
            {
                int dist = distance[minVertex] + edges[minVertex][j];
                // aata he dist j sathi best means kami aahe ka nahi
                if (dist < distance[j])
                {
                    distance[j] = dist;
                }
            }
        }
    }

    for (int i = 0; i < n; i++)
    {
        cout << i << "    " << distance[i] << endl;
    }

    delete[] visited;
    delete[] distance;
}

int main()
{
    int n, e;
    cout << "Enter the number of node and edges :";
    cin >> n >> e;

    int **edges = new int *[n];
    for (int i = 0; i < n; i++)
    {
        edges[i] = new int[n];
        for (int j = 0; j < n; j++)
        {
            edges[i][j] = 0;
        }
    }
    for (int i = 0; i < e; i++)
    {
        int f, s, weight;
        cin >> f >> s >> weight;
        edges[f][s] = weight;
        edges[s][f] = weight;
    }
    cout << endl;
    dijkstra(edges, n);

    for (int i = 0; i < n; i++)
    {
        delete[] edges[i];
    }

    return 0;
}

/*
Enter the number of node and edges :5 7
0 1 4
0 2 8
1 3 5
1 2 2
2 3 5
2 4 9
3 4 4

0    0
1    4
2    6
3    9
4    13

*/
